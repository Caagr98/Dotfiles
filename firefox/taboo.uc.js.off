/* global gBrowser */
"use strict"; {

function addStylesheet(scope=document.head) {
	return (sheet) => {
		const node = document.createElement("style");
		node.textContent = sheet;
		scope.appendChild(node);
		console.log(node);
	};
}

addEventListener("load", () => {
	update();
	addStylesheet()`
		.tabbrowser-tab[data-taboo] {
			background: radial-gradient(ellipse farthest-side at var(--taboo-pos),
				rgba(
					128,128,128,
					calc(0.7*var(--taboo))
				),
			transparent);
		}
		.tabbrowser-tab[data-taboo="parent"] { --taboo-pos: bottom; }
		.tabbrowser-tab[data-taboo="child"] { --taboo-pos: top; }
	`;
});

function doUpdate() {
	console.log(arguments);
	const dist = new Map();
	const current = gBrowser.selectedTab;
	function recurse(tab) {
		if(!dist.has(tab)) {
			let val;
			if(!tab.parentNode || tab.ownerDocument != current.ownerDocument) val = NaN;
			else if(tab === current) val = 0;
			else if(tab.openerTab) val = recurse(tab.openerTab) + 1;
			else val = NaN;
			dist.set(tab, val);
		}
		return dist.get(tab);
	}
	for(const tab of gBrowser.tabs)
		recurse(tab);
	for(let tab = current, val = 0; tab; tab = tab.openerTab, val--)
		dist.set(tab, val);
	console.log(dist);

	for(let [tab, val] of dist) {
		console.log(tab, val, Math.tanh(val));
		if(val > 0) {
			tab.setAttribute("data-taboo", "child");
			tab.style.setProperty("--taboo", 1+Math.log(1/val)/2);
		} else if(val < 0) {
			tab.setAttribute("data-taboo", "parent");
			tab.style.setProperty("--taboo", 1+Math.log(1/-val)/2);
		} else
			tab.removeAttribute("data-taboo");
	}
}

let isUpdating = false;
function update() {
	console.log(arguments);
	if(!isUpdating) {
		isUpdating = true;
		setTimeout(() => {isUpdating = false; doUpdate();}, 0);
	}
}
// From modules/sessionstore/SessionStore.jsm
const TAB_EVENTS = [
	"TabOpen",
	"TabBrowserInserted",
	"TabClose",
	"TabSelect",
	"TabShow",
	"TabHide",
	"TabPinned",
	"TabUnpinned",
];
TAB_EVENTS.forEach(e => gBrowser.tabContainer.addEventListener(e, update));

}
